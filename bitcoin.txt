
>>> Bitcoin and Cryptocurrency Technologies <<<

----------------------------------
Video: Cryptographic Hash Function

	- collision-free property, nobody can find x and y such that: x!=y and H(x)=H(y)
		=> hash as message digest: H(x)=H(y) => y=x
	- hiding property, for H(x) there is no easy way to find x 

	- commitment API, commit to a value, reveal it later
		(com, key) := commit(msg)
		match := verify(com,key,msg)

		to seal msg: 
			(com, key) := commit(msg) -- publish com
		to open:
			publish key, msg -- anyone can use verify() to check validity

	    security properties:
	    	hiding: given com infeasible to find msg
	    	binding: infeasible to find msg != msg' that verify(commit(msg),msg') == true 

	 - puzzle-friendly:
	 	for every y, if k is chosen from distribution with high min-entorpy 
	 	than is infeasible to find x that: H(k|x)=y

 - Bitcoin uses SHA-256 which splits input into 512 message blocks and sends them in chain
 	 through function: hash1 = hash(iv, block1) than hash2 = hash( hash1, block2 ) etc. when iv is random


----------------------------------------
Video: Hash Pointers and Data structures

	- hash pointer: pointer to some information togehter with hash of the info

	- we can build data structures using hash pointer instead of pointers like:
		- block chain: single linked list with hash pointers, being tamper evident
		- binary tree (Merkel tree) - easy way to prove that blocks belongs to structure showing block and path to it
		- for sorted tree we can prove non-membership
		- we can model all data with hash pointers as long as they don't have cycles


-------------------------
Video: Digital signatures		

	- Signatures
		- only you can sign but anyone can verify
		- signature is tied to particular document and cannot be reused

	- signatures API
		(sk, pk) := generateKeys( keysize )
		sig := sign(sk, message)
		isValid := verify(pk, message, sig)

	- requirements
		verify(pk, message, sign(sk, message)) == true
		one who knows pk and see signature can't produce valid signature of other messages

	- we need good source of randomness
	- we can sign hash pointer, in that way we effectively sign the whole structure like block-chain or merkel tree

	- Bitcoin uses ECDSA (Eliptic Curve Digital Signature Algorithm)


--------------------------------
Video: Public Keys as Identities

	- public key == an identity
	- identity are called "addresses" in Bitcoin - decentralized, no central authority

	- address is not directly connected to real-world identity but an observer can link adress activiy over time, inferences with real entity 


------------------------------
Video: A Simple Cryptocurrency

	- double spending attach is one of main cryptocurrency problems	
	- main problem: how to decentalize the currency


------------------------------------
Programming assignment: Scrooge Coin


----------------------------------
Week 2
---------------------------------
Video: Centralization vs Decentralization


----------------------------
Video: Distributed Consensus

	- key technical challenge of decentralized e-cash: distirbuted consensus or how to decentralize ScroogeCoin
	- traditional motivation is reliability in distributed ssystems
	- distributed key-value store: enables DNS, public key directory, stock trades and Altcoins( derivateve from Bitcoins)

	- how consensus could work in Bitcoin, at any given time
		- all nodes have a sequence of blocks of transactions they've reached consensus on 
		- each node has a set of outstanding transactions it's heard about

	- problems with Distributed Consensus (for Databases)
		- Byzantine generals problem
		- Fisher-Lynch-Paterson (deterministic nodes): consensus impossible with a single faulty node
	vs 
		- Paxos 

	- what Bitcoin does differently to Database area:
		- Bitcoin introduces incentives 
		- embraces randomness


--------------------------------------------------
Video: Consensus without Identity: the Block Chain

	- Bitcoin nodes does not have identities 
		- Sybil attach
		- pseudonomity is goal of Bitcoin

	- Implicit consensus

	- Consensus algorithm (simplified)
		1. New transactions are broadcast to all nodes
		2. Each node collects new transactions into a block
		3. In  each round a RANDOM node gets to broadcast its block
		4. Other nodes accept the block only if all transactions in it are valid (unspent, valid signatures)
		5. Nodes express their acceptance of the block by including it's hash in the next block they create


	- why it works ?
		- honest nodes will extend the longest valid branch
			-> double spend probability decreases exponentially with number of confirmations (by default Bitcoin uses 6 confirmations)
		- protection against invalid tx is cryptographic but enfroced by consensus
		- protection against double-spending is purely by consensus
		- guarantee that tx in consensus branch is probabilistic


-----------------------------------
Video: Incentives and Proof of Work

	- assumption of honesty is prolematic
		- can we give nodes incentives for behaving honestly ?
			1) creator of block gets special coin-creation transaction (currently 25 BTC and halves every 4 years)
			  only if the block ends up in long-term consensus branch
			2) transaction fees - creator of transaction can choose to make output value less than input value and remainder is a transaction fee 
			  and goes to block creator (voluntary - like a tip)
	
	- other problems:
		- how to pick a random node ?
		- how to avoid a free-for-all due to rewards ?
		- how to prevent Sybil attacks ?
		- solution: Proof of work:
			- in proportion to resource that we hope nobody can monopolize
			- in proportion to computing power: proof-of-work
			- in proportion to ownership: proof-of-stake

	- Hash puzzles
		to create block, find nonce that: H(nonce || prev_hash || tx || ... || tx) is very small and fits to very small target space
		out of bit hash output space - if hash function is secure the only way to succeed is to try enough nonces until you get lucky

	- Proof-of-Work function properties:
		- difficult to compute: about 10 to 20 pow hashes/block, only some nodes bother to compete - miners
		- parameterizable cost: nodes automatically re-calculate the target every 2 weeks. 
			Goal: average time between blocks = 10 minutes
		    -> So probability that Alice wins next block = fraction of global hash power she controls

		- Key security assumption	
			Attacks infeasible if majority of miners >>weighted by hash power<< follow the protocol

		- Trivial to verify 
			Other miners simply verify that H( nonce || prev_hash || tx || ... || tx ) < target


------------------------------
Video: Putting it all together

	- Mining economics:
		- if mining reward (block reward + tx fees) > hardware + electricity costs => profit

	- complications
		- fixed vs variable costs
		- reward depends on global hash rate

	- Recap:
		- Identities
		- Transactions
		- P2P network
		- Block chain & consensus
		- hash puzzles & mining

	- Bitcoin has threee types of consensus
		- Value
		- State
		- Rules

	- Bitcoin is bootstrapped:
		- security of black chain -> value of currency -> health of mining ecosystem -> secur....

	- What can "51% attacker" do ?
		- steel coins from existing address ? 
			-> no because even if attacker is able to generate longest consensus chain, this chain is invalid because
			"stolen" tx is not authorized 
		- Suppress some tx 
			- from black chain  -> yes
			- from P2P network  -> no, it's relatively clear that attack happens
		- change the block reward -> no 
		- destroy confidence in Bitcoin? -> yes, likely








