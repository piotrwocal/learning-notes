
>>> Bitcoin and Cryptocurrency Technologies <<<

----------------------------------
Video: Cryptographic Hash Function

	- collision-free property, nobody can find x and y such that: x!=y and H(x)=H(y)
		=> hash as message digest: H(x)=H(y) => y=x
	- hiding property, for H(x) there is no easy way to find x 

	- commitment API, commit to a value, reveal it later
		(com, key) := commit(msg)
		match := verify(com,key,msg)

		to seal msg: 
			(com, key) := commit(msg) -- publish com
		to open:
			publish key, msg -- anyone can use verify() to check validity

	    security properties:
	    	hiding: given com infeasible to find msg
	    	binding: infeasible to find msg != msg' that verify(commit(msg),msg') == true 

	 - puzzle-friendly:
	 	for every y, if k is chosen from distribution with high min-entorpy 
	 	than is infeasible to find x that: H(k|x)=y

 - Bitcoin uses SHA-256 which splits input into 512 message blocks and sends them in chain
 	 through function: hash1 = hash(iv, block1) than hash2 = hash( hash1, block2 ) etc. when iv is random


----------------------------------------
Video: Hash Pointers and Data structures

	- hash pointer: pointer to some information togehter with hash of the info

	- we can build data structures using hash pointer instead of pointers like:
		- block chain: single linked list with hash pointers, being tamper evident
		- binary tree (Merkel tree) - easy way to prove that blocks belongs to structure showing block and path to it
		- for sorted tree we can prove non-membership
		- we can model all data with hash pointers as long as they don't have cycles


-------------------------
Video: Digital signatures		

	- Signatures
		- only you can sign but anyone can verify
		- signature is tied to particular document and cannot be reused

	- signatures API
		(sk, pk) := generateKeys( keysize )
		sig := sign(sk, message)
		isValid := verify(pk, message, sig)

	- requirements
		verify(pk, message, sign(sk, message)) == true
		one who knows pk and see signature can't produce valid signature of other messages

	- we need good source of randomness
	- we can sign hash pointer, in that way we effectively sign the whole structure like block-chain or merkel tree

	- Bitcoin uses ECDSA (Eliptic Curve Digital Signature Algorithm)


--------------------------------
Video: Public Keys as Identities

	- public key == an identity
	- identity are called "addresses" in Bitcoin - decentralized, no central authority

	- address is not directly connected to real-world identity but an observer can link adress activiy over time, inferences with real entity 


------------------------------
Video: A Simple Cryptocurrency

	- double spending attach is one of main cryptocurrency problems	
	- main problem: how to decentalize the currency


------------------------------------
Programming assignment: Scrooge Coin


----------------------------------
Week 2
---------------------------------
Video: Centralization vs Decentralization


----------------------------
Video: Distributed Consensus

	- key technical challenge of decentralized e-cash: distirbuted consensus or how to decentralize ScroogeCoin
	- traditional motivation is reliability in distributed systems
	- distributed key-value store: enables DNS, public key directory, stock trades and Altcoins( derivateve from Bitcoins)

	- how consensus could work in Bitcoin, at any given time
		- all nodes have a sequence of blocks of transactions they've reached consensus on 
		- each node has a set of outstanding transactions it's heard about

	- problems with Distributed Consensus (for Databases)
		- Byzantine generals problem
		- Fisher-Lynch-Paterson (deterministic nodes): consensus impossible with a single faulty node
	vs 
		- Paxos 

	- what Bitcoin does differently to Database area:
		- Bitcoin introduces incentives 
		- embraces randomness





